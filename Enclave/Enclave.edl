/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    
    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;

    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;
    
    trusted {
        public void extractMeta(int tableID, [in, size = inSize] char *encryptedData, int inSize, [in, size = sattrSize] char *sensitiveAttr, uint sattrSize);
        public void extractData(int tableID, int nRecords);
        public int createPDS(int tableID);
        public int initJoinPDS(int pfJoin, int selectJoin);
        public int initHTree(int pfJoin, float constant, int ind);
        public void createJoinPDS(int structureID, int tableID1, int tableID2);
        public void createSelectJoinPDS(int structureID, int tableID1, int tableID2);
        public void createJoinBuckets(int structureID, int tableID1, int tableID2, int pfJoin);
        public void createCZSC(int tableID1, [in, size = inSize_t1] char *eData_t1, int inSize_t1, int join_idx1, int tableID2, [in, size = inSize_t2] char *eData_t2, int inSize_t2, int join_idx2, int pfJoin);
        public int buildIndex(int structureID, int idx_dim, [in, string] const char *str, join_type jtype);
        public int restoreIndex(int structureID, int idx_dim, [in, size = size1] char *s_idxBinStart, uint size1, [in, size = size2] char *s_idxBinEnd, uint size2);
        public void restoreJoinMeta(int tableID, int binID, int pos, int join_idx, [in, size = dsize] char *encryptedBin, uint dsize);
        public int idxSelect(int structureID, int idx_dim, int queryStart, int queryEnd, [out, size = dsize] char *s_bins, uint dsize, [out, size = rdsize] char *s_records, uint rdsize, join_type jtype);
        public int innerJoin(int structureID, int tableID1, int tableID2, int writeID, join_type jtype, int qs, int qe, int jattr);
        public int pfJoin(int structureID, int tableID1, int tableID2, int writeID, join_type jtype);
        public int czscJoin(int tableID1, int tableID2, int writeID, int pfJoin);
        public void joinCompact(int structureID, int writeID, int us_size, join_type jtype);
        // public void initSecureJoin([in, size = dpIdxSize] char *dpIdx, number dpIdxSize, number pSanitizerSize1, number pSanitizerSize2, [in, size = inputSize] char* inputData, number inputSize, [in, size=keyListSize] char* keyList, number keyListSize);
        // public void initBaseline([in, size = dpIdxSize] char *dpIdx, number dpIdxSize, number pSanitizerSize1, number pSanitizerSize2, [in, size = inputSize] char* inputData, number inputSize, [in, size=keyListSize] char* keyList, number keyListSize);
        // public void processDOJoin([out, size = statSize] char* stats, number statSize);
        // public void crossProduct(number t1Size, number t2Size, [out, size = statSize] char* stats, number statSize);
    };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
        void expand_table_OCALL(int tableID, uint noiseSum, [in, size=nsize] char *noise, uint nsize);
        int readDataBlock_OCALL(int tableID, int readBinID, int pos, [out, size = dsize] char *dblock, int dsize);
        void writeDataBlock_OCALL(int tableID, int writeBinID, uint pos, [in, size = dsize] char *dblock, uint dsize);
        void copy_bin_OCALL(int tableID, int readBinID, int writeBinID, int startPos, int endPos);
        void move_resize_bin_OCALL(int tableID, int srcBinID, int destBinID, int size);
        void move_resize_bin_totable_OCALL(int tableID, int srcBinID, int destBinID, int size);
        void initBinStorage_OCALL(int tableID, int binID);
        void delete_bin_OCALL(int tableID, int binID);
        void delete_table_OCALL(int tableID);
        void collect_resize_bins_OCALL(int tableID, [in, size = dsize] char *leaves_id, uint dsize, [in, size = bsize] char *binSizes, uint bsize);
        void write_index_OCALL(int structureID, [in, size = size1] char *s_idxBinStart, uint size1, [in, size = size2] char *s_idxBinEnd, uint size2, [in, string] const char *str);
        void write_join_output_OCALL(int writeID, [in, size = dsize] char *res, uint dsize);
        // void read_pair_records_OCALL(uint tableID, uint pos1, [out, size = rsize] char *r1, uint pos2, [out, size = rsize] char *r2, uint rsize);
        // void init_bin_OCALL(int tableID, int binID, uint size);
        // void swap_OCALL(uint tableID, uint pos1, [in, size=rsize] char* r1, uint pos2, [in, size=rsize] char *r2, int rsize);
        // uint8_t write_OCALL([in,size = res_size] char *results, uint32_t res_size);
        // uint8_t offloadPart_OCALL([in,size = partSize] char *part, uint32_t partSize, uint32_t pid);
        // uint8_t reloadPart_OCALL([out,size = partSize] char *part, uint32_t partSize, uint32_t pid);
    };

};
